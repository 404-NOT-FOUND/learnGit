#name Liu Tan
#tag  gitNote

## set up own profile 
1. set up name and email, used to dislay the author of the commit
```bash
git config --global user.name ""
git config --global user.email []
```
2. set up editor(vim for defaul)
```bash
git config -- global core.editor emacs
```


## basic git 
git help <verb> // verb (commit, add...)

git diff []

git add [] // support multiple files add

git commit -m ""

git commit -a -m "" // -a = -All add all fles

git commit --amend -m "" // amend a previous comment

git status


## other git useful comment 
1. git |mv| 
- |mkdir lib|
- |git mv Hello.java lib|
git mv will combine two step:
    (1) the |Hello.java| has been deleted
    (2) the file lib/Hello.java has been created and ready to be commmited

2. git |tag| 
git tag [] // aftertag, even reset head, when [git hist --all] we can still see
    the taged hist.
git tag -d [] // drop tag


## check historical branches  
```bash
git log --graph --pretty=oneline 
```

only display a *limit* number of commits
```bash
git log -n <limit>
```

[options]
git log --pretty=oneline --max-count=1
git log --pretty=oneline --since='5 minutes ago'
git log --pretty=oneline --until='5 minutes ago'
git log --pretty=oneline --author=<your name>
git log --pretty=oneline --all

git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
[--pretty="..."] defines the format of the output.
[%h] is the abbreviated hash of the commit
[%d] are any decorations on that commit (e.g. branch heads or tags)
[%ad] is the author date
[%s] is the comment
[%an] is the author name
[--graph] informs git to display the commit tree in an ASCII graph layout
[--date=short] keeps the date format nice and short

git reflog // check all operations

## git customize
``` bash
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
```

## version control 

1. `git checkout`
2. `git revert`
3. `git reset`
4. `git clean`

### 只是撤销修改 `checkout`

use either
- `checkout <branch>`
- `checkout <commit>`
- `checkout [commit] <file>`

#### Example 1
view all files in a <commit> state, run and compile, do some test without harm
the current state of your project.
Note: `checkout <commit>` does *not* affect the current state
``` bash
# want to see all files in old-state
git checkout <commit-id>
# do some test
#...
# go back to current(assume woring on master)
git checkout master
# undo undesired changes
git revert
# or 
git reset
```

#### Example 2

undo change, back to staging area. 

Note: `checkout <file>` *does* affect the current state
``` bash
# see file in a old commit, the old version will show as "change to be commited"
git checkout [commit] <file> 
# if you regret, want the most recent ver. back
git checkout HEAD <file>
```

### 已经add了

``` bash
git reset HEAD [file]  // unstage file
```
### 已经commit了

``` bash
git reset --hard /* pointer */ // pointer can be HEAD^ (HEAD~1) or commit id's
git revert Head // we can undo a committed change
```



## git remote

push local master branch to origin master branch
``` bash
git push origin master 
```
clone repo from github
``` bash
git clone git@github.com:peachgo-gitSkills.git 
```


## git branch 
1) view branch 
        --> |git branch|
1) creat branch 
        --> |git branch [name]|
3) creat & switch branch 
        --> |git checkout -b [name]|
4) switch branch 
        --> |git checkout [name]|
5) merge branch to curr branch 
        --> |git merge [name]|
6) delete branch 
        --> |git branch -d [name]|

git pull = git fetch | git merge |

# create and track remote repository locally
git fetch remoteName
git branch --track newLocalBranch remoteName/remoteBranch


## git regret
# undo the previous commit
git revert Head^

temporarily stash changes restore later
# after changes have been made
git stash
# do sth like switch branches, merge other changes,...
...
# reapply the changes
git stash pop

# Linux comment:
<c-r> search command history
<c-r> + \t edit command history
<c-u> delete previous command
<c-k> delete current command
